# Generated by CodiumAI
import pytest
from mappingtools import MappingCollector, MappingCollectorMode


#  Initialize MappingCollector with default mode and verify internal mapping is a dictionary
def test_initialize_default_mode():
    # Arrange
    collector = MappingCollector()

    # Act
    collector.add(1, 2)
    collector.add(1, 3)
    result = collector.mapping
    item0 = result[1]

    # Assert
    assert isinstance(result, dict)
    assert isinstance(item0, int)
    assert item0 != 2
    assert item0 == 3


#  Initialize MappingCollector with one_to_many mode and verify internal mapping is a defaultdict
def test_initialize_one_to_many_mode():
    # Arrange
    collector = MappingCollector(MappingCollectorMode.one_to_many)

    # Act
    collector.add(1, 2)
    collector.add(1, 3)
    result = collector.mapping
    item0 = result[1]

    # Assert
    assert isinstance(result, dict)
    assert isinstance(item0, list)
    assert item0 == [2, 3]


#  Add a single key-value pair in one_to_one mode and verify the mapping
def test_add_single_key_value_one_to_one():
    # Arrange
    collector = MappingCollector()

    # Act
    collector.add('key1', 'value1')
    result = collector.mapping

    # Assert
    assert result == {'key1': 'value1'}


#  Add multiple key-value pairs in one_to_many mode and verify the mapping
def test_add_multiple_key_values_one_to_many():
    # Arrange
    collector = MappingCollector(MappingCollectorMode.one_to_many)

    # Act
    collector.add('key1', 'value1')
    collector.add('key1', 'value2')
    result = collector.mapping

    # Assert
    assert result == {'key1': ['value1', 'value2']}


#  Collect key-value pairs from an iterable in one_to_one mode and verify the mapping
def test_collect_iterable_one_to_one():
    # Arrange
    collector = MappingCollector()
    iterable = [('key1', 'value1'), ('key2', 'value2')]

    # Act
    collector.collect(iterable)
    result = collector.mapping

    # Assert
    assert result == {'key1': 'value1', 'key2': 'value2'}


#  Collect key-value pairs from an iterable in one_to_many mode and verify the mapping
def test_collect_iterable_one_to_many():
    # Arrange
    collector = MappingCollector(MappingCollectorMode.one_to_many)
    iterable = [('key1', 'value1'), ('key1', 'value2')]

    # Act
    collector.collect(iterable)
    result = collector.mapping

    # Assert
    assert result == {'key1': ['value1', 'value2']}


#  Initialize MappingCollector with an invalid mode and verify it raises an error
def test_initialize_invalid_mode():
    # Arrange / Act / Assert
    with pytest.raises(ValueError):  # noqa: PT011
        MappingCollector(mode="invalid_mode")


#  Add a key-value pair with a non-hashable key and verify it raises an error
def test_add_non_hashable_key():
    # Arrange
    collector = MappingCollector()

    # Act / Assert
    with pytest.raises(TypeError):
        collector.add(['non-hashable'], 'value')


#  Collect key-value pairs from an empty iterable and verify the internal mapping remains unchanged
def test_collect_empty_iterable():
    # Arrange
    collector = MappingCollector()

    # Act
    collector.collect([])
    result = collector.mapping

    # Assert
    assert result == {}


#  Add a key-value pair with None as the key and verify the mapping
def test_add_none_key():
    # Arrange
    collector = MappingCollector()

    # Act
    collector.add(None, 'value')
    result = collector.mapping

    # Assert
    assert result == {None: 'value'}


#  Collect key-value pairs with duplicate keys in one_to_one mode and verify the last value is retained
def test_collect_duplicate_keys_one_to_one():
    # Arrange
    collector = MappingCollector()
    iterable = [('key1', 'value1'), ('key1', 'value2')]

    # Act
    collector.collect(iterable)
    result = collector.mapping

    # Assert
    assert result == {'key1': 'value2'}


#  Collect key-value pairs with duplicate keys in one_to_many mode and verify all values are appended
def test_collect_duplicate_keys_one_to_many():
    # Arrange
    collector = MappingCollector(MappingCollectorMode.one_to_many)
    iterable = [('key1', 'value1'), ('key1', 'value2')]

    # Act
    collector.collect(iterable)
    result = collector.mapping

    # Assert
    assert result == {'key1': ['value1', 'value2']}


# Returns a string representation with correct mode and mapping
def test_repr_correct_mode_and_mapping():
    from mappingtools import MappingCollector, MappingCollectorMode
    # Arrange
    mc = MappingCollector(mode=MappingCollectorMode.one_to_one, a=1, b=2)
    expected_repr = "MappingCollector(mode=MappingCollectorMode.one_to_one, mapping={'a': 1, 'b': 2})"
    # Act
    result = repr(mc)
    # Assert
    assert result == expected_repr


# Handles empty mapping correctly
def test_repr_empty_mapping():
    from mappingtools import MappingCollector, MappingCollectorMode
    # Arrange
    mc = MappingCollector(mode=MappingCollectorMode.one_to_one)
    expected_repr = "MappingCollector(mode=MappingCollectorMode.one_to_one, mapping={})"
    # Act
    result = repr(mc)
    # Assert
    assert result == expected_repr


# Works with both one_to_one and one_to_many modes
def test_repr_modes():
    from mappingtools import MappingCollector, MappingCollectorMode
    # Arrange
    mc_one_to_one = MappingCollector(mode=MappingCollectorMode.one_to_one, a=1)
    mc_one_to_many = MappingCollector(mode=MappingCollectorMode.one_to_many, a=[1])
    expected_repr_one_to_one = "MappingCollector(mode=MappingCollectorMode.one_to_one, mapping={'a': 1})"
    expected_repr_one_to_many = "MappingCollector(mode=MappingCollectorMode.one_to_many, mapping={'a': [1]})"
    # Act
    result_one_to_one = repr(mc_one_to_one)
    result_one_to_many = repr(mc_one_to_many)
    # Assert
    assert result_one_to_one == expected_repr_one_to_one
    assert result_one_to_many == expected_repr_one_to_many


# Reflects changes in the mapping accurately
def test_repr_reflects_changes():
    from mappingtools import MappingCollector, MappingCollectorMode
    # Arrange
    mc = MappingCollector(mode=MappingCollectorMode.one_to_one, a=1)
    mc.add('b', 2)
    expected_repr = "MappingCollector(mode=MappingCollectorMode.one_to_one, mapping={'a': 1, 'b': 2})"
    # Act
    result = repr(mc)
    # Assert
    assert result == expected_repr


# Properly formats the string output
def test_repr_formatting():
    from mappingtools import MappingCollector, MappingCollectorMode
    # Arrange
    mc = MappingCollector(mode=MappingCollectorMode.one_to_one, a=1)
    expected_repr = "MappingCollector(mode=MappingCollectorMode.one_to_one, mapping={'a': 1})"
    # Act
    result = repr(mc)
    # Assert
    assert result == expected_repr
    assert isinstance(result, str)


# Handles large mappings without performance issues
def test_repr_large_mapping_performance():
    import time

    from mappingtools import MappingCollector, MappingCollectorMode
    # Arrange
    large_mapping = {f'key{i}': i for i in range(10000)}
    mc = MappingCollector(mode=MappingCollectorMode.one_to_one, **large_mapping)
    start_time = time.time()
    # Act
    repr(mc)
    end_time = time.time()
    # Assert
    assert (end_time - start_time) < 1  # Ensure it completes within 1 second


# Manages special characters in keys and values
def test_repr_special_characters():
    from mappingtools import MappingCollector, MappingCollectorMode
    # Arrange
    mc = MappingCollector(mode=MappingCollectorMode.one_to_one, special_key='@#$%^&*()')
    expected_repr = "MappingCollector(mode=MappingCollectorMode.one_to_one, mapping={'special_key': '@#$%^&*()'})"
    # Act
    result = repr(mc)
    # Assert
    assert result == expected_repr


# Works when mode is not explicitly provided (default mode)
def test_repr_default_mode():
    from mappingtools import MappingCollector
    # Arrange
    mc = MappingCollector(a=1)
    expected_repr = "MappingCollector(mode=MappingCollectorMode.one_to_one, mapping={'a': 1})"
    # Act
    result = repr(mc)
    # Assert
    assert result == expected_repr


# Handles nested mappings correctly
def test_repr_nested_mappings():
    from mappingtools import MappingCollector, MappingCollectorMode
    # Arrange
    nested_mapping = {'nested': {'key': 'value'}}
    mc = MappingCollector(mode=MappingCollectorMode.one_to_one, **nested_mapping)
    expected_repr = "MappingCollector(mode=MappingCollectorMode.one_to_one, mapping={'nested': {'key': 'value'}})"
    # Act
    result = repr(mc)
    # Assert
    assert result == expected_repr
