# Generated by CodiumAI

from mappingtools import expand


# expand with expand_by_values set to True on a dictionary
def test_expand_by_values_true():
    # Arrange
    obj = {'a': 1, 'b': 2}
    expanders = {1: 'one', 2: 'two'}
    expected = {'a': 'one', 'b': 'two'}

    # Act
    result = expand(obj, expanders, expand_values=True)

    # Assert
    assert result == expected


# expand with custom key_converter function
def test_expand_custom_key_converter():
    # Arrange
    obj = {'a': 1, 'b': 2}
    expanders = {'a': 'alpha', 'b': 'beta'}
    expected = {'alpha': 1, 'beta': 2}

    # Act
    result = expand(obj, expanders)

    # Assert
    assert result == expected


# expand with custom value_converter function
def test_expand_custom_value_converter():
    # Arrange
    obj = {'a': 1, 'b': 2}
    expanders = {1: 'one', 2: 'two'}
    expected = {'a': 'one', 'b': 'two'}

    # Act
    result = expand(obj, expanders, expand_values=True)

    # Assert
    assert result == expected


# expand with both key_converter and value_converter functions
def test_expand_both_converters():
    # Arrange
    obj = {'a': 1, 'b': 2}
    expanders = {'a': 'alpha', 'b': 'beta', 1: 'one', 2: 'two'}
    expected = {'a': 'one', 'b': 'two'}

    # Act
    result = expand(obj, expanders, expand_values=True)

    # Assert
    assert result == expected


# expand with a dictionary containing non-string keys
def test_expand_non_string_keys():
    # Arrange
    obj = {1: 'one', 2: 'two'}
    expanders = {1: 'one_key', 2: 'two_key'}
    expected = {'one_key': 'one', 'two_key': 'two'}

    # Act
    result = expand(obj, expanders)

    # Assert
    assert result == expected


# expand with a dictionary containing non-string values
def test_expand_non_string_values():
    # Arrange
    obj = {'a': 1, 'b': 2}
    expanders = {1: 'one', 2: 'two'}
    expected = {'a': 'one', 'b': 'two'}

    # Act
    result = expand(obj, expanders, expand_values=True)

    # Assert
    assert result == expected


# expand with a deeply nested dictionary
def test_expand_deeply_nested_dict():
    # Arrange
    obj = {'a': {'b': {'c': 1}}}
    expanders = {1: 'one'}
    expected = {'a': {'b': {'c': 'one'}}}

    # Act
    result = expand(obj, expanders, expand_values=True)

    # Assert
    assert result == expected


# expand with a dictionary containing special characters in keys or values
def test_expand_special_characters_in_dict():
    # Arrange
    obj = {'@key!': '#value$'}
    expanders = {'@key!': '@new_key!'}
    expected = {'@new_key!': '#value$'}

    # Act
    result = expand(obj, expanders)

    # Assert
    assert result == expected


# expand with a dictionary containing None values
def test_expand_none_values_in_dict():
    # Arrange
    obj = {'a': None}
    expanders = {None: 'none_value'}
    expected = {'a': 'none_value'}

    # Act
    result = expand(obj, expanders, expand_values=True)

    # Assert
    assert result == expected


# expand with a dictionary containing mixed data types
def test_expand_mixed_data_types_in_dict():
    # Arrange
    obj = {'a': 1, 2.5: [3, 4], (5, 6): {7}}
    expanders = {'a': 'char_a', 2.5: 'two_point_five', (5, 6): '(five_six)'}
    expected = {'char_a': 1, 'two_point_five': [3, 4], (5, 6): [7]}

    # Act
    result = expand(obj, expanders)

    # Assert
    assert result == expected
