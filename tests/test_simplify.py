# Generated by CodiumAI
import dataclasses

from mappingtools import simplify


#  Converts a list of dictionaries to a list of simplified dictionaries
def test_simplify_list_of_dicts():
    # Arrange
    obj = [{'a': 1}, {'b': 2}]
    expected = [{'a': 1}, {'b': 2}]

    # Act
    actual = simplify(obj)

    # Assert
    assert actual == expected


#  Converts a dataclass instance to a dictionary
def test_simplify_dataclass_instance():
    # Arrange
    @dataclasses.dataclass
    class Person:
        name: str
        age: int

    obj = Person(name="Alice", age=30)
    expected = {'name': "Alice", 'age': 30}

    # Act
    actual = simplify(obj)

    # Assert
    assert actual == expected


#  Converts a nested structure of dictionaries and lists
def test_simplify_nested_structure():
    # Arrange
    obj = {'a': [1, {'b': 2}], 'c': {'d': 3}}
    expected = {'a': [1, {'b': 2}], 'c': {'d': 3}}

    # Act
    actual = simplify(obj)

    # Assert
    assert actual == expected


#  Handles objects with __dict__ attribute by converting them to dictionaries
def test_simplify_object_with_dict_attribute():
    # Arrange
    class Person:
        def __init__(self, name, age):
            self.name = name
            self.age = age

    obj = Person(name="Alice", age=30)
    expected = {'name': "Alice", 'age': 30}

    # Act
    actual = simplify(obj)

    # Assert
    assert actual == expected


#  Handles empty dictionaries and lists
def test_simplify_empty_structures():
    # Arrange
    obj = {}
    expected = {}

    # Act
    actual = simplify(obj)

    # Assert
    assert actual == expected

    # Arrange for empty list
    obj = []
    expected = []

    # Act
    actual = simplify(obj)

    # Assert
    assert actual == expected


#  Handles None as input
def test_simplify_none_input():
    # Arrange
    obj = None

    # Act
    actual = simplify(obj)

    # Assert
    assert actual is None


#  Handles objects with non-standard attributes
def test_simplify_non_standard_attributes():
    # Arrange
    class CustomObject:
        def __init__(self):
            self._private_attr = "private"
            self.public_attr = "public"

    obj = CustomObject()
    expected = {'public_attr': "public"}

    # Act
    actual = simplify(obj)

    # Assert
    assert actual == expected


#  Handles deeply nested structures
def test_simplify_deeply_nested_structures():
    # Arrange
    obj = {'a': [{'b': [{'c': 1}]}]}
    expected = {'a': [{'b': [{'c': 1}]}]}

    # Act
    actual = simplify(obj)

    # Assert
    assert actual == expected


#  Handles objects with circular references
# def test_simplify_circular_references():
#     # Arrange
#     obj = {}
#     obj['self'] = obj
#
#     # Act & Assert (should not raise an error)
#     try:
#         dictify(obj)
#         assert True  # If no exception is raised, the test passes.
#     except RecursionError:
#         assert False  # If a RecursionError is raised, the test fails.

#  Handles mixed types within lists
def test_simplify_mixed_types_within_lists():
    # Arrange
    obj = [1, "string", {'a': 2}]
    expected = [1, "string", {'a': 2}]

    # Act
    actual = simplify(obj)

    # Assert
    assert actual == expected
